syntax = "proto3";

package Accounts;

import "./platform.proto";

message CreateRequest {
    string email = 1;
    string password = 2;
}

message AuthenticateRequest {
    string email = 1;
    string password = 2;
}

message AuthenticateResponse {
    int32 id = 1;
    string access_token = 2;
};

message TokenRequest {
    string access_token = 1;
}

message CreateResponse {
    int32 id = 1;
    string access_token = 2;
    string email_verification_token = 3;
}

message TokenResponse {
    string access_token = 1;
}

message TokenPayloadResponse {
    string iss = 1;
    string sub = 2;
    string aud = 3;
    int32 iat = 4;
    int32 exp = 5;
    
    int32 id = 6;
}

message ResetPasswordRequest {
    string email = 1;
}

message ResetPasswordResponse {
    int32 id = 1;
    string reset_password_token = 2;
}

message SetPasswordRequest {
    string email = 1;
    string old_password_or_token = 2;
    string new_password = 3;
}

message VerifyEmailRequest {
    string email = 1;
    string token = 2;
}

message AccountResponse {
    int32 id = 1;
    string email = 2;
    string first_name = 3;
    string last_name = 4;
    string email_verification_token = 5;
}

service Service {
   rpc create(Accounts.CreateRequest) returns(Accounts.CreateResponse);
   rpc authenticate(Accounts.AuthenticateRequest) returns(Accounts.AuthenticateResponse);
   rpc verifyToken(Accounts.TokenRequest) returns(Accounts.TokenPayloadResponse);
   rpc refreshToken(Accounts.TokenRequest) returns(Accounts.TokenResponse);
   rpc resetPassword(Accounts.ResetPasswordRequest) returns(Accounts.ResetPasswordResponse);
   rpc setPassword(Accounts.SetPasswordRequest) returns(Platform.MessageResponse);
   rpc verifyEmail(Accounts.VerifyEmailRequest) returns(Platform.MessageResponse);
   rpc getAccountById(Platform.AccountIdRequest) returns(Accounts.AccountResponse);
}