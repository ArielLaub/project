syntax = "proto3";

package Notifications;

import "./platform.proto";

message SendTemplateRequest {
    string template_name = 1;
    repeated TemplateContent template_content = 2;
    EmailMessage message = 3;
    bool async = 4;
    string ip_pool = 5;
    string send_to = 6;
    
    message TemplateContent {
        string name = 1;
        string content = 2;
    }
    
    message EmailMessage {
        string html = 1;
        string text = 2;
        string subject = 3;
        string from_email = 4;
        string from_name = 5;
        repeated RecipientInfo to = 6;
        map<string, string> headers = 7;
        bool important = 8;
        bool track_opens = 9;
        bool track_clicks = 10;
        bool auto_text = 11;
        bool auto_html = 12;
        bool inline_css = 13;
        bool url_strip_qa = 14;
        bool preserve_recipients = 15;
        bool view_content_link = 16;
        string bcc_address = 17;
        string tracking_domain = 18;
        string signing_domain = 19;
        string return_path_domain = 20;
        bool merge = 21;
        string merge_language = 22;
        repeated GlobalMergeVar global_merge_vars = 23;
        repeated MergeVar merge_vars = 24;
        repeated string tags = 25 [packed=true];
        string subaccount = 26;
        repeated string google_analytics_domains = 27 [packed=true];
        string google_analytics_campaign = 28;
        map<string, string> metadata = 29;
        repeated RecipientMetadata recipient_metadata = 30;
        repeated MimeObject attachments = 31;
        repeated MimeObject images = 32;
        
        message RecipientInfo {
            string email = 1;
            string name = 2;
            string type = 3;
        }
        
        message GlobalMergeVar {
            string name = 1;
            string content = 2;
        }
        
        message MergeVar {
            string rcpt = 1;
            repeated GlobalMergeVar vars = 2;
        }
        
        message RecipientMetadata {
            string rcpt = 1;
            map<string, string> values = 2;
        }
        
        message MimeObject {
            string type = 1;
            string name = 2;
            string content = 3;
        }
    }
}

message SendTemplateResponse {
    repeated RecipientResponse results = 1;
        
    message RecipientResponse {
        string email = 1;
        string status = 2;
        string reject_reason = 3;
        string _id = 4;
    }    
}

service Service {
   rpc sendEmailTemplate(Notifications.SendTemplateRequest) returns(Notifications.SendTemplateResponse);
   rpc sendResetPasswordEmail(Platform.AccountIdRequest) returns(Notifications.SendTemplateResponse);
}